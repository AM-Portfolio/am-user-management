# services:
#   app:
#     build: 
#       context: .
#       dockerfile: Dockerfile
#     ports:
#       - "8000:8000"
#     env_file:
#       - .env.docker
#     volumes:
#       - .:/app
#     command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
#     networks:
#       - app-network

# networks:
#   app-network:
#     driver: bridge

# services:
#   app:
#     build: 
#       context: .
#       dockerfile: Dockerfile
#     ports:
#       - "192.168.1.13:8000:8000"
#     env_file:
#       - .env.docker
#     volumes:
#       - .:/app
#     command: uvicorn main:app --host 0.0.0.0 --port 8000
#     networks:
#       - app-network
#     restart: unless-stopped
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#     deploy:
#       resources:
#         limits:
#           cpus: '1'
#           memory: 1G
#         reservations:
#           cpus: '0.5'
#           memory: 512M

# networks:
#   app-network:
#     driver: bridge
#     ipam:
#       driver: default
#       config:
#         - subnet: 172.30.0.0/16  # Changed subnet to avoid conflicts

services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "192.168.1.13:8000:8000"
    env_file:
      - .env
    volumes:
      - .:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: postgres:15-alpine
    ports:
      - "192.168.1.13:5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "192.168.1.13:6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16